# Copyright 2019 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


variables:
  PATH: "/home/gitlabci/bin:/usr/lib64/qt-3.3/bin:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:/usr/local/condor/bin:/usr/sepp/bin:/usr/local/anaconda3/bin:/var/lib/snapd/snap/bin"
before_script:
  - pwd
  - echo "$PATH"

# after_script:
#   - echo "stage finished"

stages:
  - fetch
  - build_and_test_boot
  - build_and_test
  - build_and_test_vips
  - build_and_test_psram
  - build_fpga
  - sim_questa_multivers


fetch_std:
  stage: fetch
  script:
    - echo "Fetching regression tests"
    - make test-checkout-gitlab
    - mkdir -p regression_tests/riscv_tests_soc
    - cp -r regression_tests/riscv_tests/* regression_tests/riscv_tests_soc
    - mkdir regression_tests/hellospi
    - cp -r regression_tests/hello/* regression_tests/hellospi/
    - mkdir regression_tests/hellohyper
    - cp -r regression_tests/hello/* regression_tests/hellohyper/
    - source setup/vsim.sh
    - echo "Fetching IPs"
    - make checkout
    - echo "Fetching vips"
    - ./rtl/vip/get-vips.sh --yes --gitlab
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - .bender/*
      - bender
      - Bender.lock
      - sim/*
      - rtl/vip/*
      - regression_tests/*

b&t_rtl_std:
  stage: build_and_test
  before_script:
    - echo "Generate scripts without DPI and VIP support"
    - make scripts
    - echo "Compiling RTL model and DPI libraries"
    - make build
    - echo "Fetching Runtime"
    - make pulp-runtime
    - echo "Source and exports"
    - source pulp-runtime/configs/pulp.sh; 
    - export PULP_RISCV_GCC_TOOLCHAIN=/usr/pack/pulpsdk-1.0-kgf/artifactory/pulp-sdk-release/pkg/pulp_riscv_gcc/1.0.16/
    - export PATH=/usr/pack/pulpsdk-1.0-kgf/artifactory/pulp-sdk-release/pkg/pulp_riscv_gcc/1.0.16/bin/:$PATH
  script:
    - echo "Running software test"
    - make test-fast-regressions
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - .bender/*
      - bender
      - Bender.lock
      - regression_tests/*
      - tests/*
      - sim/*
      - rtl/*
    reports:
      junit: regression_tests/simplified-runtime.xml


b&t_rtl_vip:
  stage: build_and_test_vips
  before_script:
    - echo "Generate scripts with DPI and VIP support"
    - make scripts-vips
    - echo "Compiling RTL model and DPI libraries"
    - make build
    - echo "Fetching Runtime"
    - make pulp-runtime
    - echo "Source and exports"
    - source pulp-runtime/configs/pulp.sh; 
    - export PULP_RISCV_GCC_TOOLCHAIN=/usr/pack/pulpsdk-1.0-kgf/artifactory/pulp-sdk-release/pkg/pulp_riscv_gcc/1.0.16/
    - export PATH=/usr/pack/pulpsdk-1.0-kgf/artifactory/pulp-sdk-release/pkg/pulp_riscv_gcc/1.0.16/bin/:$PATH
  script:
    - echo "Running software test"
    - make git-ci-periphs-regs
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - .bender/*
      - bender
      - Bender.lock
      - regression_tests/*
      - sim/*
      - rtl/*
    reports:
      junit: regression_tests/simplified-periph-runtime.xml

b&t_rtl_boot:
  stage: build_and_test_boot
  before_script:
    - echo "Generate scripts with DPI and VIP support"
    - make scripts-vips
    - echo "Compiling RTL model and DPI libraries"
    - make build
    - echo "Fetching Runtime"
    - git clone  https://github.com/pulp-platform/pulp-runtime.git -b boot_code_update
    - echo "Source and exports"
    - source pulp-runtime/configs/pulp.sh; 
    - export PULP_RISCV_GCC_TOOLCHAIN=/usr/pack/pulpsdk-1.0-kgf/artifactory/pulp-sdk-release/pkg/pulp_riscv_gcc/1.0.16/
    - export PATH=/usr/pack/pulpsdk-1.0-kgf/artifactory/pulp-sdk-release/pkg/pulp_riscv_gcc/1.0.16/bin/:$PATH
  script:
    - echo "Running software test"
    - make git-boot
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - .bender/*
      - bender
      - Bender.lock
      - regression_tests/*
      - sim/*
      - rtl/*
    reports:
      junit: regression_tests/boot-runtime.xml


b&t_rtl_psram:
  stage: build_and_test_psram
  before_script:
    - echo "Generate scripts with DPI and VIP support"
    - make scripts-psram
    - echo "Compiling RTL model and DPI libraries"
    - make build
    - echo "Fetching Runtime"
    - make pulp-runtime
    - echo "Source and exports"
    - source pulp-runtime/configs/pulp.sh; 
    - export PULP_RISCV_GCC_TOOLCHAIN=/usr/pack/pulpsdk-1.0-kgf/artifactory/pulp-sdk-release/pkg/pulp_riscv_gcc/1.0.16/
    - export PATH=/usr/pack/pulpsdk-1.0-kgf/artifactory/pulp-sdk-release/pkg/pulp_riscv_gcc/1.0.16/bin/:$PATH
  script:
    - echo "Running software test"
    - make git-ci-psram
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - .bender/*
      - bender
      - Bender.lock
      - regression_tests/*
      - sim/*
      - rtl/*
    reports:
      junit: regression_tests/simplified-psram-runtime.xml

build_fpga:
  stage: build_fpga
  before_script:
    - echo "Generate scripts for FPGA"
    - make scripts
  script:
    - echo "Building for zcu102"
    - make -C fpga zcu102 VIVADO='vivado-2019.1.1 vivado'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - fpga/*

sim_questa_multivers:
  stage: sim_questa_multivers
  allow_failure: true
  when: always
  parallel:
    matrix:
      - QUESTA_PREFIX:
        - 'questa-2019.3'
        - 'questa-2020.1'
        - 'questa-2021.3'
  before_script:
    - export VSIM="$QUESTA_PREFIX vsim"
    - export VLOG="$QUESTA_PREFIX vlog"
    - export VOPT="$QUESTA_PREFIX vopt"
    - export VLIB="$QUESTA_PREFIX vlib"
    - export VMAP="$QUESTA_PREFIX vmap"
    - export VCOM="$QUESTA_PREFIX vcom"
    - export PULP_RISCV_GCC_TOOLCHAIN=/usr/pack/pulpsdk-1.0-kgf/artifactory/pulp-sdk-release/pkg/pulp_riscv_gcc/1.0.16/
    - git clone https://github.com/pulp-platform/pulp-runtime.git -b v0.0.15
    - mkdir hello
    - printf "#include <stdio.h>\nint main(){\n  printf(\"Hello World\\\n\");\n  return 0;\n}\n" > hello/hello.c
    - printf "PULP_APP = hello\nPULP_APP_FC_SRCS = hello.c\nPULP_APP_HOST_SRCS = hello.c\nPULP_CFLAGS = -O3 -g\n\ninclude \$(PULP_SDK_HOME)/install/rules/pulp_rt.mk\n" > hello/Makefile
  script:
    - make scripts
    - make clean build
    - source setup/vsim.sh
    - source pulp-runtime/configs/pulp.sh
    - make -C hello clean all run
  dependencies:
    - fetch_std
  needs:
    - fetch_std
